What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, you create an empty area where all of your files will be added. Until then, you'll be working with files on your hard drive. When you initialize a repository it will show the names of the files but they haven't actually been added in a commit. In order to start really working with the version control features of git, you'll need to perform a commit. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is like an intermediary between the working directory and the repository. Items in the staging area haven't really been committed to the repository yet but they're on their way. The value of the staging area is that it allows you to control your first commit. You can break up your files into commits that make logical sense, ie one commit per logical change. You can also add a specific note to the commit which you wouldn't be able to do if Git just created the first commit for you. 

How can you use the staging area to make sure you have one commit per logical change?
Before you actually commit the changes, you can use the staging area to compare your changes with the last commit. This gives you a chance to think and reflect on whether this is a logical change that needs a commit. You can also compare what is in the staging area to what is in your working directory. 

What are some situations where branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful when you want to create different versions of the same project. This could be an easier or more difficult version of a game. Maybe you want to add a totally experimental feature or functionality or you're localizing the game for a different geographic area. In all of these situations, another branch would be useful in keeping the changes more organized and separated. You'd likely want your original or master version intact while you do these other experimentations. Later, you can decide if you want to add some of the other branches back to master and this will be easier than jumping around between commits and trying to figure out which ones made the changes. Branches are like a larger section of new commits. You can also give them human names which helps with organization as well. 